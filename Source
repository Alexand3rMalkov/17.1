#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <locale.h>
#include <ctype.h>
#include <stdlib.h>
#define N 25

void random(int* ptrarr);
void put_Massive(int* ptrarr);
void sort_buble(int* ptrarr);
void sort_select(int* ptrarr);
void sort_insert(int* ptrarr);

int main() {
	system("chcp 1251");
	int Massive[N];
	
	printf("Сортировка пузырьком:\n");
	void random(int* ptrarr);
	sort_buble(Massive);
	put_Massive(Massive);
	printf("\n");

	printf("Сортировка простым выбором:\n");
	void random(int* ptrarr);
	sort_select(Massive);
	put_Massive(Massive);
	printf("\n");

	printf("Сортировка вставками:\n");
	void random(int* ptrarr);
	sort_insert(Massive);
	put_Massive(Massive);
	printf("\n");
}
void random(int *ptrarr) {

	for (int i = 0; i < N; i++) {
		ptrarr[i] = rand() % 100;
		printf("[%d] = %d\n", i, ptrarr[i]);
	}
}

void sort_buble(int* ptrarr) {
	int x;
	for (int i = 0; i < N - 1; i++) {
		for (int k = 0; k < N - 1; k++) {
			if (ptrarr[k] > ptrarr[k + 1]) {
				x = ptrarr[k];
				ptrarr[k] = ptrarr[k + 1];
				ptrarr[k + 1] = x;
			}
		}
	}
}

void put_Massive (int* ptrarr) {
	for (int i = 0; i < N; i++) {
		printf("%d\n", ptrarr[i]);
	}
}

void sort_select(int* ptrarr) {
	int i = 0;
	int k = N;
	for (; i < N; i++) {
		int max = ptrarr[0], nom = 0;
		for (i = 0; i < k; i++) {
			while (ptrarr[i] > max)
				max = ptrarr[i], nom = i;
		}
		int b = ptrarr[k - 1];
		ptrarr[k - 1] = ptrarr[nom];
		ptrarr[nom] = b;
		k--;
	}
}

void sort_insert(int* ptrarr) {
	int k = N;
	for (int i = 0; i < k - 1; i++) {
		int temp = ptrarr[i];
		int j = i;
		while (ptrarr[j - 1] > temp && j > 0) {
			ptrarr[j] = ptrarr[j - 1];
			j = j - 1;
		}
		ptrarr[j] = temp;
	}
	return ptrarr;
}
